version: "3"
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: catalog-api
    restart: always
    ports:
      - "8888:8888"
    env_file:
      - ./.env
    depends_on:
      mysql-db:
        condition: service_healthy
      mongo-db:
        condition: service_healthy

  mysql-db:
    image: mysql:8.0.30-debian
    container_name: mysql-db
    restart: always
    env_file:
      - ./.env
    ports:
      - "3306:3306"
    volumes:
      - .docker/mysql:/var/lib/mysql
      - ./db/mysql-entrypoint:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 30s
      retries: 5

  adminer:
    container_name: adminer
    image: adminer:4.8.1
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      mysql-db:
        condition: service_healthy

  mongo-db:
    image: mongo
    container_name: mongo-db
    restart: always
    ports:
      - 27017:27017
    env_file:
      - './.env'
    volumes:
      - .docker/mongo:/data/db
      - ./db/mongo-entrypoint:/docker-entrypoint-initdb.d/
    healthcheck: 
      test: ["CMD-SHELL", "echo 'db.runCommand({find:\"$MONGO_DB_NAME.$MONGO_USERNAME\"}).ok' | mongosh --authenticationDatabase admin --host localhost -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD admin --quiet | grep -q 1"]
      interval: 10s
      timeout: 30s 
      retries: 5
      start_period: 10s

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    env_file:
      - './.env'
    depends_on:
      mongo-db:
        condition: 'service_healthy'